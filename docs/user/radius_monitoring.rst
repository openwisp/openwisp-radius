.. _integration_with_openwisp_monitoring:

Integration with OpenWISP Monitoring
------------------------------------

OpenWISP RADIUS includes an optional Django sub-app that adds integration with
`OpenWISP Monitoring <https://github.com/openwisp/openwisp-monitoring#openwisp-monitoring>`_
to provide RADIUS metrics.

.. image:: /images/radius-dashboard-charts.png
   :alt: RADIUS session dashboard charts

RADIUS metrics
==============

1. User registrations
~~~~~~~~~~~~~~~~~~~~~

.. image:: /images/user-registration-chart.png
   :alt: User registration chart

This chart shows number of users signed up using different registration methods.

2. Total user registrations
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: /images/total-user-registration-chart.png
   :alt: Total user registration chart

This chart shows total users registered using different registration methods
in the system on a given date.

3. Unique RADIUS Sessions
~~~~~~~~~~~~~~~~~~~~~~~~~

.. image:: /images/unique-radius-session-chart.png
   :alt: Unique RADIUS session chart

This chart shows unique RADIUS sessions. It is helpful to know how many
unique users has used the system in a given time.

4. RADIUS traffic
~~~~~~~~~~~~~~~~~

.. image:: /images/radius-traffic-chart.png
   :alt: RADIUS traffic chart

This chart shows the RADIUS traffic generated by user sessions.

Enabling RADIUS metrics in Django project
=========================================

You can enable the monitoring integration by including ``openwisp_radius.integrations.monitoring``
in ``INSTALLED_APPS`` of your Django project's settings as following:


.. code-block:: python

    # In your_project/settings.py

    INSTALLED_APPS = [
        # ...
        'openwisp_radius',
        'openwisp_radius.integrations.monitoring' # <--- add the app after openwisp_radius
        # ...
    ]

.. note::

    Ensure your Django project is correctly configured to utilize OpenWISP Monitoring as
    outlined in the `OpenWISP Monitoring's documentation <https://github.com/openwisp/openwisp-monitoring#setup-integrate-in-an-existing-django-project>`_.
    For production environments, it is advisable to deploy OpenWISP using
    `Ansible OpenWISP2 <https://github.com/openwisp/ansible-openwisp2>`_ or
    `Docker OpenWISP <https://github.com/openwisp/docker-openwisp>`_, as they simplify
    the deployment process considerably.

.. important::

    If you are registering a :ref:`"registration method" <openwisp_radius_register_registration_method>`
    in any other Django application, then ``openwisp_radius.integrations.monitoring``
    should come after that app in the ``INSTALLED_APPS``. Otherwise, the
    registration method would not appear in the chart.

