[changelog]
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    Version {{ version | trim_start_matches(pat="v") }}  [{{ timestamp | date(format="%Y-%m-%d") }}]
    ---------------------------
{% else %}\
    [unreleased]
    ------------
{% endif %}\
{#- Features block #}
{% for group, commits in commits | group_by(attribute="group") %}
    {% set clean_group = group | striptags | trim %}
    {%- if clean_group == "Features" -%}
        {{ clean_group | upper_first }}
        ~~~~~~~~
        {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | split(pat="]") | nth(n=1) | trim | upper_first }}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{#- Changes block -#}
{% for group, commits in commits | group_by(attribute="group") %}
    {% set clean_group = group | striptags | trim -%}
        {% if clean_group == "Backward-incompatible changes" or clean_group == "Other changes" or clean_group == "Dependencies" -%}
            Changes
            ~~~~~~~
            {% break %}
        {% endif -%}
{% endfor %}
{%- for group, commits in commits | group_by(attribute="group") %}
    {% set clean_group = group | striptags | trim -%}
    {%- if clean_group == "Backward-incompatible changes" -%}
        {{ clean_group | upper_first }}
        +++++++++++++++++++++++++++++++++
        {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | split(pat="]") | nth(n=1) | trim | upper_first }}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{% for group, commits in commits | group_by(attribute="group") %}
    {% set clean_group = group | striptags | trim %}
    {%- if clean_group == "Other changes" -%}
        {{ clean_group | upper_first }}
        +++++++++++++
        {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | split(pat="]") | nth(n=1) | trim | upper_first }}
        {%- endfor -%}
    {% endif %}
{%- endfor -%}
{% for group, commits in commits | group_by(attribute="group") %}
    {%- set clean_group = group | striptags | trim -%}
    {%- if clean_group == "Dependencies" -%}
        {{ clean_group | upper_first }}
        ++++++++++++
        {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | split(pat="]") | nth(n=1) | trim | upper_first }}
        {%- endfor -%}
    {%- endif -%}
{%- endfor -%}
{#- Bugfixes block #}
{%- for group, commits in commits | group_by(attribute="group") -%}
    {% set clean_group = group | striptags | trim %}
    {% if clean_group == "Bugfixes" %}
        {{ clean_group | upper_first }}
        ~~~~~~~~
        {% for commit in commits %}
            - {{ commit.message | split(pat="\n") | first | split(pat="]") | nth(n=1) | trim | upper_first }}
        {%- endfor -%}
    {% endif %}
{% endfor %}
"""

# remove the leading and trailing space
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# an array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
  { pattern = '#([0-9]+)', replace = '`#$1 <https://github.com/#REPO#/issues/$1>`_' },
]

# regex for parsing and grouping commits
commit_parsers = [
  # Any commits with [skip changelog] in their message will be ignored.
  { message = "\\[skip changelog\\]", skip = true },
  # Regex for features, e.g., '[feature]' or '[feature:api]'
  { message = "^(\\[feature(:[a-zA-Z0-9_-]+)?\\])", group = "<!-- 0 -->Features", strip = "message" },
  # Regex for backward-incompatible changes, e.g., '[change!]' or '[change:db!]'
  { message = "^(\\[change(:[a-zA-Z0-9_-]+)?!\\])", group = "<!-- 1 -->Backward-incompatible changes", strip = "message" },
  # Regex for regular changes, e.g., '[change]' or '[change:ui]'
  { message = "^(\\[change(:[a-zA-Z0-9_-]+)?\\])", group = "<!-- 2 -->Other changes", strip = "message" },
  # Regex for dependency updates, e.g., '[deps]' or '[deps:npm]'
  { message = "^(\\[deps(:[a-zA-Z0-9_-]+)?\\])", group = "<!-- 3 -->Dependencies", strip = "message" },
  # Regex for bugfixes, e.g., '[fix]' or '[fix:tests]'
  { message = "^(\\[fix(:[a-zA-Z0-9_-]+)?\\])", group = "<!-- 4 -->Bugfixes", strip = "message" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
